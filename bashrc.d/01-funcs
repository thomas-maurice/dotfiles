#!/bin/bash

# A bunch of these are stolen from https://github.com/jessfraz/dotfiles/blob/master/.functions

# Create a new directory and enter it
mkd() {
    mkdir -p "$@"
    cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
    local dir
    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || exit
}

# Start an HTTP server from a directory, optionally specifying the port
serve() {
    local port="${1:-8000}"
    python -m http.server ${port}
}

# Run `dig` and display the most useful info
digg() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Reload bashrc
rbrc() {
    source ~/.bashrc
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}â€¦"
    echo ""; # newline

    local tmp
    tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
        | openssl s_client -connect "${domain}:443" 2>&1)

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText
        certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_header, no_serial, no_version, \
            no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
        echo "Common Name:"
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
        echo ""; # newline
        echo "Subject Alternative Name(s):"
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found."
        return 1
    fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
o() {
    if [ $# -eq 0 ]; then
        xdg-open .    > /dev/null 2>&1
    else
        xdg-open "$@" > /dev/null 2>&1
    fi
}

# Restarts gpg agent and scdaemon
restart_gpgagent(){
    # Restart the gpg agent.
    echo "Restarting gpg-agent and scdaemon..."
    echo -e "\tgpg-agent: $(pgrep gpg-agent) | scdaemon: $(pgrep scdaemon)"

    echo "Killing processes..."
    # shellcheck disable=SC2046
    kill -9 $(pgrep scdaemon) $(pgrep gpg-agent) >/dev/null 2>&1
    echo -e "\tgpg-agent: $(pgrep gpg-agent) | scdaemon: $(pgrep scdaemon)"

    gpgconf --reload gpg-agent
    gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1

    echo "Restarted gpg-agent and scdaemon..."
}

newgpg(){
    dir=$(mktemp -d)
    cd $dir
    export GNUPGHOME=$dir
    cp ~/.gnupg/*.conf $GNUPGHOME
    gpg --list-keys
}

upl () {
    if [ -z "$1" ]; then
        echo "No file specified"
        return 1
    fi;

    mc cp $1 minio/uploads/$(basename $1)
    #mc retention minio/uploads/$(basename $1) compliance 7d
    mc share download minio/uploads/$(basename $1) --json | jq -r .share
}

# Connects to a host with a vault certificate
sssh () {
    echo "checking the state of our vault token"
    if ! vault token lookup > /dev/null 2>&1 ; then
        echo "logging into vault..."
        vl
    else
        echo "vault token is alright"
    fi
    echo "issuing a new certificate"

    ssh_data=$(tempfile --prefix=ssh-data)
    vault-cert ssh sign -p $USER,root > ${ssh_data}
    key=$(jq -r .data.key < ${ssh_data})
    cert=$(jq -r .data.certPath < ${ssh_data})
    echo "using key ${key} and cert ${cert}"
    ssh -i ${cert} -i ${key} $@
}

minio_get_binary() {
    local binary_name=$1
    local local_name=$2

    if [ -z "${MINIO_NAME}" ]; then
        echo "MINIO_NAME unset"
        return 1
    fi;

    if [ -z "${MINIO_BINARY_BUCKET}" ]; then
        echo "MINIO_BINARY_BUCKET unset"
        return 1
    fi;

    if [ -z "$binary_name" ]; then
        echo "Binary name is empty"
        return 1
    fi;

    if [ -z "$local_name" ]; then
        echo "Using $binary_name as the local name"
        local_name=${binary_name}
    fi;

    echo "Retrieving the binary ${binary_name}"

    mc cp ${MINIO_NAME}/${MINIO_BINARY_BUCKET}/${binary_name}/${binary_name}.sig /tmp/${binary_name}.sig
    mc cp ${MINIO_NAME}/${MINIO_BINARY_BUCKET}/${binary_name}/${binary_name} /tmp/${binary_name}
    chmod +x /tmp/${binary_name}

    if ! gpg --verify /tmp/${binary_name}.sig /tmp/${binary_name}; then
        echo "The signature is not valid"
        return 1
    fi;

    cp /tmp/${binary_name} ~/bin/${local_name}
}

update_binaries() {
    minio_get_binary vault-cert vault-cert
    minio_get_binary ezcrypt ezcrypt
    minio_get_binary reddit_grabber reddit_grabber
}

dockerclean() {
    docker system prune -af
}
